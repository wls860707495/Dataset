--- original/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
+++ fixed/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
@@ -260 +260 @@ public class BracketingNthOrderBrentSolver
                if (!((nextX > xA) && (nextX < xB))) {
                    // the guessed root is not strictly inside of the tightest bracketing interval

                    // the guessed root is either not strictly inside the interval or it
                    // is a NaN (which occurs when some sampling points share the same y)
                    // we try again with a lower interpolation order
-                    if (signChangeIndex - start >= end - signChangeIndex) {
+                   if (((signChangeIndex - start) >= (end - signChangeIndex)) || (xA <= yA)) {
                        // we have more points before the sign change, drop the lowest point
                        ++start;
                    } else {
                        // we have more points after sign change, drop the highest point
                        --end;
                    }

                    // we need to do one more attempt
                    nextX = Double.NaN;

                }